# version: '3'
# services:
#   backend:
#     build:
#       context: ./backend
#     ports:
#       - "5001:5001"
#     depends_on:
#       - mongodb
#     networks:
#       - mynetwork
#   mongodb:
#     image: mongo
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#       MONGO_INITDB_DATABASE: mydatabase
#     ports:
#       - "27018:27018"
#     networks:
#       - mynetwork
#     command: mongod --port 27018
#   mongo-seed:
#     build:
#       context: .
#       dockerfile: ./Dockerfile-mongo-seed
#     depends_on:
#       - mongodb
#     networks:
#       - mynetwork
# networks:
#   mynetwork:
#     driver: bridge

version: '3'
services:
  backend:
    build:
      context: ./backend
    container_name: backend
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
    networks:
      - mynetwork
      

      
  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: mydatabase
    ports:
      - "27018:27018"
    networks:
      - mynetwork
    command: mongod --port 27018
  mongo-seed:
    build:
      context: .
      dockerfile: ./Dockerfile-mongo-seed
    depends_on:
      - mongodb
    networks:
      - mynetwork
  client:
    build:
      context: ./client
    container_name: my-client
    ports:
      - "8080:8080"
    networks:
      - mynetwork

  kong-database:
    image: postgres:9.6
    container_name: kong-postgres
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
#######################################
  # Kong database migration
#######################################
  kong-migration:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    command: kong migrations bootstrap
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    depends_on:
      - kong-database
#######################################
  # Kong: The API Gateway
#######################################
  kong:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    restart: on-failure
    networks:
      - kong-net
      - mynetwork
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-database
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
#######################################
  # Konga database prepare
#######################################
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database
#######################################
  # Konga: Kong GUI
#######################################
  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
        - kong-net   
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"
volumes:
  kong_data: {}

networks:
  mynetwork:
    driver: bridge
  kong-net:
